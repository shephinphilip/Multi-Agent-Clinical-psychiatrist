"""
agents/conversation_initiator.py
────────────────────────────────
Zenark Conversation Initiator
────────────────────────────────
Purpose:
 • If the user is NEW → greet them naturally and start a first conversation.
 • If the user has CHATTED BEFORE → recall their last topic and continue conversationally.
"""

import logging
from typing import Optional, Dict, List
import asyncio
from openai import AsyncOpenAI
from datetime import datetime

from services.zenark_db_cloud import (
    get_user,
    get_conversation_history,
    save_interaction,
)

logger = logging.getLogger("zenark.agent.conversation_initiator")
client = AsyncOpenAI()

# ──────────────────────────────
# Utility: async runner
# ──────────────────────────────
def run_async(coro):
    try:
        loop = asyncio.get_running_loop()
        return loop.create_task(coro)
    except RuntimeError:
        return asyncio.run(coro)


class ConversationInitiator:
    """LLM-driven smart conversation starter for Zenark."""

    def __init__(self):
        self.agent_name = "ConversationInitiator"
        logger.info("💬 ConversationInitiator initialized successfully.")

    # ──────────────────────────────
    # MAIN FUNCTION
    # ──────────────────────────────
    async def initiate_chat(self, username: str, session_id: str) -> str:
        """
        Initiates the chat based on user's prior history.

        Args:
            username: str — unique user identifier
            session_id: str — current chat session ID

        Returns:
            str — greeting message generated by LLM
        """
        user_doc = await get_user(username)
        # Fetch only this session’s history
        conv_history = await get_conversation_history(username, session_id=session_id, limit=5)

        is_new_user = not await get_user(username)
        is_returning = bool(conv_history) and not is_new_user
       
        name = username.title() if username else "there"

        if not user_doc:
            logger.warning(f"⚠️ User not found: {username}, using fallback profile.")
            user_doc = {"username": username, "created_at": datetime.utcnow()}

        # ──────────────────────────────
        # CASE 1: NEW USER
        # ──────────────────────────────
        if not is_returning:
            system_prompt = f"""
You are Zen, a warm and empathetic AI companion.
The user {name} is interacting for the very first time.

Generate a welcoming message that:
- Greets them kindly
- Explains you’re here to listen and support
- Invites them to share how they feel
- Feels natural and conversational
(2–3 sentences)
"""
            user_prompt = f"Generate a friendly first-time greeting for {name}."
        else:
            # ──────────────────────────────
            # CASE 2: RETURNING USER
            # ──────────────────────────────
            # Safely collect and cast all last messages as strings
            last_msgs = [str(m.get("message", "")) for m in conv_history if m.get("message")]
            last_summary = " ".join(msg for msg in last_msgs[-3:] if isinstance(msg, str) and msg.strip())


            # Detect if there’s any meaningful prior context
            has_topic = any(
                keyword in last_summary.lower()
                for keyword in ["exam", "school", "stress", "parents", "friend", "sleep", "anxious", "work"]
            )

            if has_topic:
                memory_context = last_summary.strip()[-400:]
                system_prompt = f"""
You are Zen, a caring AI companion reconnecting with {name}.
Last time, {name} shared thoughts about topics like:
{memory_context}

Generate a natural follow-up greeting that:
- Welcomes them warmly
- References their last topic gently (e.g., "last time you mentioned...")
- Asks a soft, conversational follow-up
- Keeps tone caring and natural
Example:
"Hi {name}, last time you mentioned feeling nervous about your exams — have they finished? How did it go?"
"""
                user_prompt = f"Generate a warm follow-up greeting for {name} based on: {memory_context}"
            else:
                # No detectable past topic — fallback to generic returning greeting
                system_prompt = f"""
You are Zen, a warm AI companion greeting {name}, who has chatted with you before.
However, you don’t recall specific past topics.

Generate a natural greeting that:
- Welcomes them back kindly
- Mentions it's been some time since you last talked
- Asks casually how things have been going
- 2–3 sentences
Example: "Hey {name}, it’s great to see you again! What’s been happening lately?"
"""
                user_prompt = f"Generate a neutral returning greeting for {name}."

        # ──────────────────────────────
        # LLM CALL
        # ──────────────────────────────
        try:
            response = await client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt},
                ],
                temperature=0.8,
                max_tokens=120,
            )
            greeting = (response.choices[0].message.content or "").strip()
        except Exception as e:
            logger.error(f"❌ Failed to generate greeting: {e}")
            if is_returning:
                greeting = f"Hi {name}, it’s nice to see you again! How have you been since we last talked?"
            else:
                greeting = f"Hey {name}, I’m Zen — your personal companion. How are you feeling today?"

        # ──────────────────────────────
        # SAVE INTERACTION
        # ──────────────────────────────
        try:
            await save_interaction(
                user_id=username,
                agent=self.agent_name,
                user_input="(system: conversation start)",
                response=greeting,
                metadata={"is_returning": is_returning, "session_id": session_id},
            )
        except Exception as e:
            logger.warning(f"⚠️ Failed to log greeting: {e}")

        logger.info(f"[ConversationInitiator] 🗣️ Greeting generated for {username}: {greeting}")
        return greeting
